// "It's not about doing something fancy, it is about getting things done on time"

Why performance analysis?
Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR … you get it. If a software feature can not cope with the scale of tasks users need to perform – it is as good as dead.
This is why we need to critically analyse performance.

 
 
 If I give you 2 programs and tell you test which one is faster what would you do?
 Naive way to solve this problem is to run both of these programs on your computer and check whih programme takes more time.
 Now you will be thinking that the problem is solved but there are many drawbacks of this approach.
 
 1. Programming languages used to write those programmes matters a lot it may happen that one language is faster than other(eg Java vs C++ vs Python).
 2. Internal configuration of your Computer.
 3. It may happen that one software is slow as compared to other software that you used to run your programs. and many more...
 To overcome these problems we use Asymptotic Analysis.
 
 
 Asymptotic Analysis:
                    In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size.
                    For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size.
                    
                    
Here are some running times for this example:
Linear Search running time in seconds on A: 0.2 * n
Binary Search running time in seconds on B: 1000*log(n)

------------------------------------------------
|n      | Running time on A | Running time on B |
-------------------------------------------------
|10     | 2 sec             | ~ 1 h             |
-------------------------------------------------
|100    | 20 sec            | ~ 1.8 h           |
-------------------------------------------------
|10^6   | ~ 55.5 h          | ~ 5.5 h           |
-------------------------------------------------
|10^9   | ~ 6.3 years       | ~ 8.3 h           |
-------------------------------------------------
so you can see that for small inputs Linear search is better that logarithmic search , but for large inputs logarithmic search is way better than the linear search.

